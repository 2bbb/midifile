@@BEGIN:	FunctionDocumentation
@CLASSNAME:	MidiFile
@METHOD:	mergeTracks
@ACCESS:	public
@RETURN:	void
@PARAMETERS:	int track1, int track2
@FILE:		MidiFile.cpp
@LINES:		628-673
@SEEALSO:	
@SHORTDESC:	Combine two tracks into a single track.
@LONGDESC:	Combine the data from two tracks into one, placing the
		data in the first track parameter, and moving the other
		tracks in the file around to file in the spot where track 2
		was deleted from.  The results of this function call cannot
		be reversed.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::mergeTracks -- combine the data from two
//   tracks into one.  Placing the data in the first
//   track location listed, and Moving the other tracks
//   in the file around to fill in the spot where Track2
//   used to be.  The results of this function call cannot
//   be reversed.
//

void MidiFile::mergeTracks(int aTrack1, int aTrack2) {
   MidiEventList* mergedTrack;
   mergedTrack = new MidiEventList;
   int oldTimeState = getTimeState();
   if (oldTimeState == TIME_STATE_DELTA) {
      absoluteTime();
   }
   int i, j;
   int length = getNumTracks();
   for (i=0; i&lt;(int)events[aTrack1]-&gt;size(); i++) {
      mergedTrack-&gt;push_back((*events[aTrack1])[i]);
   }
   for (j=0; j&lt;(int)events[aTrack2]-&gt;size(); i++) {
      (*events[aTrack2])[i].track = aTrack1;
      mergedTrack-&gt;push_back((*events[aTrack2])[i]);
   }

   sortTrack(*mergedTrack);

   delete events[aTrack1];

   events[aTrack1] = mergedTrack;

   for (i=aTrack2; i&lt;length-1; i++) {
      events[i] = events[i+1];
   }

   events[length] = NULL;
   events.resize(length-1);

   if (oldTimeState == TIME_STATE_DELTA) {
      deltaTime();
   }
}

@@END:	FunctionDocumentation



