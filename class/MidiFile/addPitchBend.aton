@@BEGIN:	FunctionDocumentation
@CLASSNAME:	MidiFile
@METHOD:	addPitchBend
@ACCESS:	public
@RETURN:	int
@PARAMETERS:	int track, int time, int channel, double amount
@FILE:		MidiFile.cpp
@LINES:		325-365
@SEEALSO:	
@SHORTDESC:	Insert a pitch bend message into the given track.
@LONGDESC:	Insert a pitch bend message into the given track.  The amount
		parameter is in the range from -1.0 to +1.0, which will
		be converted into a 14-bit integer and packed into
		two data bytes of a MIDI pitch-bend message.
		<ul> 
		<li>-1.0 maps to 0 (0x0000) </li>
		<li>0.0 maps to 8192 (0x2000 &rarr; 0x40 0x00) </li>
		<li>+1.0 maps to 16383 (0x3fff) &rarr; 0x7f 0x7f </li>
		</ul>

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::addPitchBend -- convert  number in the range from -1 to +1
//     into two 7-bit numbers (smallest piece first)
//
//   -1.0 maps to 0 (0x0000)
//    0.0 maps to 8192 (0x2000 --&gt; 0x40 0x00)
//   +1.0 maps to 16383 (0x3FFF --&gt; 0x7F 0x7F)
//

int MidiFile::addPitchBend(int aTrack, int aTime, int aChannel, double amount) {
   timemapvalid = 0;
   amount += 1.0;
   int value = int(amount * 8192 + 0.5);

   // prevent any wrap-around in case of round-off errors
   if (value &gt; 0x3fff) {
      value = 0x3fff;
   }
   if (value &lt; 0) {
      value = 0;
   }

   int lsbint = 0x7f &amp; value;
   int msbint = 0x7f &amp; (value  &gt;&gt; 7);

   vector&lt;uchar&gt; mididata;
   mididata.resize(3);
   if (aChannel &lt; 0) {
      aChannel = 0;
   } else if (aChannel &gt; 15) {
      aChannel = 15;
   }
   mididata[0] = uchar(0xe0 | aChannel);
   mididata[1] = uchar(lsbint);
   mididata[2] = uchar(msbint);

   return addEvent(aTrack, aTime, mididata);
}

@@END:	FunctionDocumentation



