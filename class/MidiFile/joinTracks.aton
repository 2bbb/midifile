@@BEGIN:	FunctionDocumentation
@CLASSNAME:	MidiFile
@METHOD:	joinTracks
@ACCESS:	public
@RETURN:	void
@PARAMETERS:	void
@FILE:		MidiFile.cpp
@LINES:		1083-1126
@SEEALSO:	splitTracks
@SHORTDESC:	Merge all tracks into a single stream of events.
@LONGDESC:	Merge the data from all tracks, but keep the identify
		of the tracks unique so that the function splitTracks()
		can be called to split the tracks into separate streams
		again.  The style of the MidiFile when read from a file 
		is with the tracks split.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::joinTracks -- merge the data from all tracks,
//   but keeping the identity of the tracks unique so that
//   the function splitTracks can be called to split the
//   tracks into separate units again.  The style of the
//   MidiFile when read from a file is with tracks split.
//

void MidiFile::joinTracks(void) {
   if (getTrackState() == TRACK_STATE_JOINED) {
      return;
   }
   if (getNumTracks() == 1) {
      return;
   }

   vector &lt;MFEvent&gt;* joinedTrack;
   joinedTrack = new vector&lt;MFEvent&gt;;
   joinedTrack-&gt;reserve(200000);
   joinedTrack-&gt;clear();
   int oldTimeState = getTimeState();
   if (oldTimeState == TIME_STATE_DELTA) {
      absoluteTime();
   }
   int i, j;
   int length = getNumTracks();
   for (i=0; i&lt;length; i++) {
      for (j=0; j&lt;(int)events[i]-&gt;size(); j++) {
         joinedTrack-&gt;push_back((*events[i])[j]);
      }
   }

   erase();

   delete events[0];
   events[0] = joinedTrack;
   sortTracks();
   if (oldTimeState == TIME_STATE_DELTA) {
      deltaTime();
   }
}

@@END:	FunctionDocumentation



