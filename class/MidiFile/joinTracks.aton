@@BEGIN:	FunctionDocumentation
@INDEXED:	yes
@CLASSNAME:	MidiFile
@METHOD:	joinTracks
@ACCESS:	public
@RETURN:	void
@PARAMETERS:	void
@FILE:		MidiFile.cpp
@LINES:		745-798
@SEEALSO:	splitTracks
@SHORTDESC:	Merge all tracks into a single stream of events.
@LONGDESC:	Merge the data from all tracks, but keep the identify
		of the tracks unique so that the function splitTracks()
		can be called to split the tracks into separate streams
		again.  The style of the MidiFile when read from a file 
		is with the tracks split.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::joinTracks -- Interleave the data from all tracks,
//   but keeping the identity of the tracks unique so that
//   the function splitTracks can be called to split the
//   tracks into separate units again.  The style of the
//   MidiFile when read from a file is with tracks split.
//   The original track index is stored in the MidiEvent::track
//   variable.
//

void MidiFile::joinTracks(void) {
   if (getTrackState() == TRACK_STATE_JOINED) {
      return;
   }
   if (getNumTracks() == 1) {
      return;
   }

   MidiEventList* joinedTrack;
   joinedTrack = new MidiEventList;

   int messagesum = 0;
   int length = getNumTracks();
   int i, j;
   for (i=0; i&lt;length; i++) {
      messagesum += (*events[i]).size();
   }
   joinedTrack-&gt;reserve((int)(messagesum + 32 + messagesum * 0.1));

   int oldTimeState = getTimeState();
   if (oldTimeState == TIME_STATE_DELTA) {
      absoluteTime();
   }
   for (i=0; i&lt;length; i++) {
      for (j=0; j&lt;(int)events[i]-&gt;size(); j++) {
         joinedTrack-&gt;push_back_no_copy(&amp;(*events[i])[j]);
      }
   }

   clear_no_deallocate();

   delete events[0];
   events.resize(0);
   events.push_back(joinedTrack);
   sortTracks();
   if (oldTimeState == TIME_STATE_DELTA) {
      deltaTime();
   }

   theTrackState = TRACK_STATE_JOINED;
}

@@END:	FunctionDocumentation



