@@BEGIN:	FunctionDocumentation
@CLASSNAME:	MidiFile
@METHOD:	deltaTime
@ACCESS:	public
@RETURN:	void
@PARAMETERS:	void
@FILE:		MidiFile.cpp
@LINES:		436-470
@SEEALSO:	absoluteTime
@SHORTDESC:	Convert timestamps into delta times.
@LONGDESC:	Convert timestamps into delta times, which means that
		the time field in the MFEvent structure represents the
		time since the last event was played.  When a MIDI file
		is read from a file, this is the default setting.  Typically
		a MidiFile will be in absolute time when inserting messages
		so that the messages do not have to be inserted in
		chronological order.  When finished inserting messages,
		the tracks can be sorted by absolute time, and then
		converted to delta time with this function.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::deltaTime -- convert the time data to
//     delta time, which means that the time field
//     in the MidiEvent struct represents the time
//     since the last event was played. When a MIDI file
//     is read from a file, this is the default setting.
//

void MidiFile::deltaTime(void) {
   if (getTimeState() == TIME_STATE_DELTA) {
      return;
   }
   int i, j;
   int temp;
   int length = getNumTracks();
   int *timedata = new int[length];
   for (i=0; i&lt;length; i++) {
      timedata[i] = 0;
      if (events[i]-&gt;size() &gt; 0) {
         timedata[i] = (*events[i])[0].time;
      } else {
         continue;
      }
      for (j=1; j&lt;(int)events[i]-&gt;size(); j++) {
         temp = (*events[i])[j].time;
         (*events[i])[j].time = temp - timedata[i];
         timedata[i] = temp;
      }
   }
   theTimeState = TIME_STATE_DELTA;
   delete [] timedata;
}

@@END:	FunctionDocumentation



