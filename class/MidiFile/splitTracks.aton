@@BEGIN:	FunctionDocumentation
@CLASSNAME:	MidiFile
@METHOD:	splitTracks
@ACCESS:	public
@RETURN:	void
@PARAMETERS:	void
@FILE:		MidiFile.cpp
@LINES:		780-832
@SEEALSO:	
@SHORTDESC:	Take joined tracks and split them back into their separate
		track identities.
@LONGDESC:	Take joined tracks and split them back into their separate
		track identities.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::splitTracks -- Take the joined tracks and split them
//   back into their separate track identities.
//

void MidiFile::splitTracks(void) {
   if (getTrackState() == TRACK_STATE_SPLIT) {
      return;
   }
   int oldTimeState = getTimeState();
   if (oldTimeState == TIME_STATE_DELTA) {
      absoluteTime();
   }

   int maxTrack = 0;
   int i;
   int length = events[0]-&gt;size();
   for (i=0; i&lt;length; i++) {
      if ((*events[0])[i].track &gt; maxTrack) {
          maxTrack = (*events[0])[i].track;
      }
   }
   int trackCount = maxTrack + 1;

   if (trackCount &lt;= 1) {
      return;
   }

   MidiEventList* olddata = events[0];
   events[0] = NULL;
   events.resize(trackCount);
   for (i=0; i&lt;=trackCount; i++) {
      events[i] = new MidiEventList;
   }

   int trackValue = 0;
   for (i=0; i&lt;length; i++) {
      trackValue = (*olddata)[i].track;
      events[trackValue]-&gt;push_back_no_copy(&amp;(*olddata)[i]);
   }

   olddata-&gt;detach();
   delete olddata;

   if (oldTimeState == TIME_STATE_DELTA) {
      deltaTime();
   }

   theTrackState = TRACK_STATE_SPLIT;
}

@@END:	FunctionDocumentation



