@@BEGIN:	FunctionDocumentation
@INDEXED:	yes
@CLASSNAME:	MidiFile
@METHOD:	read
@ACCESS:	public
@RETURN:	int
@PARAMETERS:	const char* filename
@PARAMETERS:	const string& filename
@PARAMETERS:	istream& input
@FILE:		MidiFile.cpp
@LINES:		134-464
@SEEALSO:	
@SHORTDESC:	Read a Standard MIDI File in binary or ASCII formats.
@LONGDESC:	Parse a Standard MIDI File from either a file or from
		an already opened input stream, and store its contents
		in the MidiFile object.  The function can also handle
		ASCII text input that describes a Stadard MIDI file in
		the binasc format (either as hex byte codes, or in
		more structured content).

@@BEGIN: EXAMPLE
@DESCRIPTION: Read a MidiFile from a file with the read() function.
@CODE:
#include "MidiFile.h"

int main(void) {
   MidiFile midifile;
   MidiFile midifile.read("test.mid");
   return 0;
}
@OUTPUT:
@@END:	EXAMPLE

@@BEGIN: EXAMPLE
@DESCRIPTION: Use the MidiFile constructor to read from a file.
@CODE:
#include "MidiFile.h"

int main(void) {
   MidiFile midifile("test.mid");
   return 0;
}
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::read -- Parse a Standard MIDI File and store its contents
//      in the object.
//

int MidiFile::read(const char* filename) {
   timemapvalid = 0;
   if (filename != NULL) {
      setFilename(filename);
   }

   fstream input;
   input.open(filename, ios::binary | ios::in);

   if (!input.is_open()) {
      return 0;
   }

   return MidiFile::read(input);
}


//
// string version of read().
//


int MidiFile::read(const string&amp; filename) {
   timemapvalid = 0;
   setFilename(filename);

   fstream input;
   input.open(filename.data(), ios::binary | ios::in);

   if (!input.is_open()) {
      return 0;
   }

   return MidiFile::read(input);
}


//
// istream version of read().
//

int MidiFile::read(istream&amp; input) {
   if (input.peek() != 'M') {
      // If the first byte in the input stream is not 'M', then presume that
      // the MIDI file is in the binasc format which is an ASCII representation
      // of the MIDI file.  Convert the binasc content into binary content and
      // then continue reading with this function.
      stringstream binarydata;
      Binasc binasc;
      binasc.writeToBinary(binarydata, input);
      binarydata.seekg(0, ios_base::beg);
      if (binarydata.peek() != 'M') {
         cerr &lt;&lt; "Bad MIDI data input" &lt;&lt; endl;
	 return 0;
      } else {
         return read(binarydata);
      }
   }

   const char* filename = getFilename();

   int    character;
   // uchar  buffer[123456] = {0};
   ulong  longdata;
   ushort shortdata;


   // Read the MIDI header (4 bytes of ID, 4 byte data size,
   // anticipated 6 bytes of data.

   character = input.get();
   if (character == EOF) {
      cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'M' at first byte, but found nothing." &lt;&lt; endl;
      return 0;
   } else if (character != 'M') {
      cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'M' at first byte but got '"
           &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
      return 0;
   }

   character = input.get();
   if (character == EOF) {
      cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'T' at first byte, but found nothing." &lt;&lt; endl;
      return 0;
   } else if (character != 'T') {
      cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'T' at first byte but got '"
           &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
      return 0;
   }

   character = input.get();
   if (character == EOF) {
      cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'h' at first byte, but found nothing." &lt;&lt; endl;
      return 0;
   } else if (character != 'h') {
      cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'h' at first byte but got '"
           &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
      return 0;
   }

   character = input.get();
   if (character == EOF) {
      cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'd' at first byte, but found nothing." &lt;&lt; endl;
      return 0;
   } else if (character != 'd') {
      cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
      cerr &lt;&lt; "Expecting 'd' at first byte but got '"
           &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
      return 0;
   }

   // read header size (allow larger header size?)
   longdata = MidiFile::readLittleEndian4Bytes(input);
   if (longdata != 6) {
      cerr &lt;&lt; "File " &lt;&lt; filename
           &lt;&lt; " is not a MIDI 1.0 Standard MIDI file." &lt;&lt; endl;
      cerr &lt;&lt; "The header size is " &lt;&lt; longdata &lt;&lt; " bytes." &lt;&lt; endl;
      return 0;
   }

   // Header parameter #1: format type
   int type;
   shortdata = MidiFile::readLittleEndian2Bytes(input);
   switch (shortdata) {
      case 0:
         type = 0;
         break;
      case 1:
         type = 1;
         break;
      case 2:    // Type-2 MIDI files should probably be allowed as well.
      default:
         cerr &lt;&lt; "Error: cannot handle a type-" &lt;&lt; shortdata
              &lt;&lt; " MIDI file" &lt;&lt; endl;
         return 0;
   }

   // Header parameter #2: track count
   int tracks;
   shortdata = MidiFile::readLittleEndian2Bytes(input);
   if (type == 0 &amp;&amp; shortdata != 1) {
      cerr &lt;&lt; "Error: Type 0 MIDI file can only contain one track" &lt;&lt; endl;
      cerr &lt;&lt; "Instead track count is: " &lt;&lt; shortdata &lt;&lt; endl;
      return 0;
   } else {
      tracks = shortdata;
   }
   clear();
   if (events[0] != NULL) {
      delete events[0];
   }
   events.resize(tracks);
   for (int z=0; z&lt;tracks; z++) {
      events[z] = new MidiEventList;
      events[z]-&gt;reserve(10000);   // Initialize with 10,000 event storage.
      events[z]-&gt;clear();
   }

   // Header parameter #3: Ticks per quarter note
   shortdata = MidiFile::readLittleEndian2Bytes(input);
   if (shortdata &gt;= 0x8000) {
      int framespersecond = ((!(shortdata &gt;&gt; 8))+1) &amp; 0x00ff;
      int resolution      = shortdata &amp; 0x00ff;
      switch (framespersecond) {
         case 232:  framespersecond = 24; break;
         case 231:  framespersecond = 25; break;
         case 227:  framespersecond = 29; break;
         case 226:  framespersecond = 30; break;
         default:
               cerr &lt;&lt; "Warning: unknown FPS: " &lt;&lt; framespersecond &lt;&lt; endl;
               framespersecond = 255 - framespersecond + 1;
               cerr &lt;&lt; "Setting FPS to " &lt;&lt; framespersecond &lt;&lt; endl;
      }
      // actually ticks per second (except for frame=29 (drop frame)):
      ticksPerQuarterNote = shortdata;

      cerr &lt;&lt; "SMPTE ticks: " &lt;&lt; ticksPerQuarterNote &lt;&lt; " ticks/sec" &lt;&lt; endl;
      cerr &lt;&lt; "SMPTE frames per second: " &lt;&lt; framespersecond &lt;&lt; endl;
      cerr &lt;&lt; "SMPTE frame resolution per frame: " &lt;&lt; resolution &lt;&lt; endl;
   }  else {
      ticksPerQuarterNote = shortdata;
   }


   //////////////////////////////////////////////////
   //
   // now read individual tracks:
   //

   uchar runningCommand;
   MidiEvent event;
   vector&lt;uchar&gt; bytes;
   int absticks;
   int status;
   // int barline;

   for (int i=0; i&lt;tracks; i++) {
      runningCommand = 0;

      // cout &lt;&lt; "\nReading Track: " &lt;&lt; i + 1 &lt;&lt; flush;

      // read track header...

      character = input.get();
      if (character == EOF) {
         cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'M' at first byte in track, but found nothing."
              &lt;&lt; endl;
         return 0;
      } else if (character != 'M') {
         cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'M' at first byte in track but got '"
              &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
         return 0;
      }

      character = input.get();
      if (character == EOF) {
         cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'T' at first byte in track, but found nothing."
              &lt;&lt; endl;
         return 0;
      } else if (character != 'T') {
         cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'T' at first byte in track but got '"
              &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
         return 0;
      }

      character = input.get();
      if (character == EOF) {
         cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'r' at first byte in track, but found nothing."
              &lt;&lt; endl;
         return 0;
      } else if (character != 'r') {
         cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'r' at first byte in track but got '"
              &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
         return 0;
      }

      character = input.get();
      if (character == EOF) {
         cerr &lt;&lt; "In file " &lt;&lt; filename &lt;&lt; ": unexpected end of file." &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'k' at first byte in track, but found nothing."
              &lt;&lt; endl;
         return 0;
      } else if (character != 'k') {
         cerr &lt;&lt; "File " &lt;&lt; filename &lt;&lt; " is not a MIDI file" &lt;&lt; endl;
         cerr &lt;&lt; "Expecting 'k' at first byte in track but got '"
              &lt;&lt; character &lt;&lt; "'" &lt;&lt; endl;
         return 0;
      }

      // Now read track chunk size and throw it away because it is
      // not really necessary since the track MUST end with an
      // end of track meta event, and 50% of Midi files or so
      // do not correctly give the track size.
      longdata = MidiFile::readLittleEndian4Bytes(input);

      // set the size of the track allocation so that it might
      // approximately fit the data.
      events[i]-&gt;reserve(longdata/2);
      events[i]-&gt;clear();

      // process the track
      absticks = 0;
      // barline = 1;
      while (!input.eof()) {
         longdata = extractVlvTime(input);
         //cout &lt;&lt; "ticks = " &lt;&lt; longdata &lt;&lt; endl;
         absticks += longdata;
         status = extractMidiData(input, bytes, runningCommand);
         if (status == 0) {
            return 0;
         }
         event.setMessage(bytes);
         //cout &lt;&lt; "command = " &lt;&lt; hex &lt;&lt; (int)event.data[0] &lt;&lt; dec &lt;&lt; endl;
         if (bytes[0] == 0xff &amp;&amp; (bytes[1] == 1 ||
             bytes[1] == 2 || bytes[1] == 3 || bytes[1] == 4)) {
           // mididata.push_back('\0');
           // cout &lt;&lt; '\t';
           // for (int m=0; m&lt;event.data[2]; m++) {
           //    cout &lt;&lt; event.data[m+3];
           // }
           // cout.flush();
         } else if (bytes[0] == 0xff &amp;&amp; bytes[1] == 0x2f) {
            // end of track message
            // uncomment out the following three lines if you don't want
            // to see the end of track message (which is always required,
            // and added automatically when a MIDI is written.
            event.tick = absticks;
            event.track = i;
            events[i]-&gt;push_back(event);

            break;
         }

         if (bytes[0] != 0xff &amp;&amp; bytes[0] != 0xf0) {
            event.tick = absticks;
            event.track = i;
            events[i]-&gt;push_back(event);
         } else {
            event.tick = absticks;
            event.track = i;
            events[i]-&gt;push_back(event);
         }

      }

   }

   theTimeState = TIME_STATE_ABSOLUTE;
   return 1;
}

@@END:	FunctionDocumentation



