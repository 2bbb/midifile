@@BEGIN:	FunctionDocumentation
@INDEXED:	yes
@CLASSNAME:	MidiFile
@METHOD:	getTimeInSeconds
@ACCESS:	public
@RETURN:	double
@PARAMETERS:	int track, int index
@PARAMETERS:	int absoluteTick
@FILE:		MidiFile.cpp
@LINES:		1633-1673
@SEEALSO:	
@SHORTDESC:	Return the time in seconds for the specified message.
@LONGDESC:	Return the time in seconds for the specified message.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::getTimeInSeconds -- return the time in seconds for
//     the current message.
//

double MidiFile::getTimeInSeconds(int aTrack, int anIndex) {
   return getTimeInSeconds(getEvent(aTrack, anIndex).tick);
}


double MidiFile::getTimeInSeconds(int tickvalue) {
   if (timemapvalid == 0) {
      buildTimeMap();
      if (timemapvalid == 0) {
         return -1.0;    // something went wrong
      }
   }

   _TickTime key;
   key.tick    = tickvalue;
   key.seconds = -1;

   void* ptr = bsearch(&amp;key, timemap.data(), timemap.size(),
         sizeof(_TickTime), ticksearch);

   if (ptr == NULL) {
      // The specific tick value was not found, so do a linear
      // search for the two tick values which occur before and
      // after the tick value, and do a linear interpolation of
      // the time in seconds values to figure out the final
      // time in seconds.
      // Since the code is not yet written, kill the program at this point:
      cerr &lt;&lt; "ERROR: tick value " &lt;&lt; tickvalue &lt;&lt; " was not found " &lt;&lt; endl;
      exit(1);
   } else {
      return ((_TickTime*)ptr)-&gt;seconds;
   }
}

@@END:	FunctionDocumentation



