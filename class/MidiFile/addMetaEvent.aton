@@BEGIN:	FunctionDocumentation
@CLASSNAME:	MidiFile
@METHOD:	addMetaEvent
@ACCESS:	public
@RETURN:	int
@PARAMETERS:	int track, int time, int type, vector<uchar>& data
@PARAMETERS:	int track, int time, int type, const char* data
@FILE:		MidiFile.cpp
@LINES:		232-273
@SEEALSO:	
@SHORTDESC:	Insert a meta message event.
@LONGDESC:	Insert a meta message event into a the given track and 
		return the index of the inserted MidiEvents in the track list.
		The const char* version accepts a null-terminated string.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

///////////////////////////////
//
// MidiFile::addMetaEvent --
//

int MidiFile::addMetaEvent(int aTrack, int aTime, int aType,
      vector&lt;uchar&gt;&amp; metaData) {
   timemapvalid = 0;
   int i;
   int length = metaData.size();
   vector&lt;uchar&gt; fulldata;
   uchar size[23] = {0};
   int lengthsize =  makeVLV(size, length);

   fulldata.resize(2+lengthsize+length);
   fulldata[0] = 0xff;
   fulldata[1] = aType &amp; 0x7F;
   for (i=0; i&lt;lengthsize; i++) {
      fulldata[2+i] = size[i];
   }
   for (i=0; i&lt;length; i++) {
      fulldata[2+lengthsize+i] = metaData[i];
   }

   return addEvent(aTrack, aTime, fulldata);
}


int MidiFile::addMetaEvent(int aTrack, int aTime, int aType,
      const char* metaData) {

   int length = strlen(metaData);
   vector&lt;uchar&gt; buffer;
   buffer.resize(length);
   int i;
   for (i=0; i&lt;length; i++) {
      buffer[i] = (uchar)metaData[i];
   }
   return addMetaEvent(aTrack, aTime, aType, buffer);
}

@@END:	FunctionDocumentation



