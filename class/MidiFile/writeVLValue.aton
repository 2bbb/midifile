@@BEGIN:	FunctionDocumentation
@INDEXED:	no
@CLASSNAME:	MidiFile
@METHOD:	writeVLValue
@ACCESS:	private
@RETURN:	void
@PARAMETERS:	long value, vector<uchar>& data
@FILE:		MidiFile.cpp
@LINES:		2085-2110
@SEEALSO:	
@SHORTDESC:	Convert an integer int a list of VLV bytes.
@LONGDESC:	Convert an integer int a list of VLV bytes.

@@BEGIN: EXAMPLE
@DESCRIPTION:
@CODE:
@OUTPUT:
@@END:	EXAMPLE

@SRCCODE:

//////////////////////////////
//
// MidiFile::writeVLValue -- write a number to the midifile
//    as a variable length value which segments a file into 7-bit
//    values.  Maximum size of aValue is 0x7fffffff
//

void MidiFile::writeVLValue(long aValue, vector&lt;uchar&gt;&amp; outdata) {
   uchar bytes[5] = {0};
   bytes[0] = (uchar)(((ulong)aValue &gt;&gt; 28) &amp; 0x7f);  // most significant 5 bits
   bytes[1] = (uchar)(((ulong)aValue &gt;&gt; 21) &amp; 0x7f);  // next largest 7 bits
   bytes[2] = (uchar)(((ulong)aValue &gt;&gt; 14) &amp; 0x7f);
   bytes[3] = (uchar)(((ulong)aValue &gt;&gt; 7)  &amp; 0x7f);
   bytes[4] = (uchar)(((ulong)aValue)       &amp; 0x7f);  // least significant 7 bits

   int start = 0;
   while (start&lt;5 &amp;&amp; bytes[start] == 0)  start++;

   for (int i=start; i&lt;4; i++) {
      bytes[i] = bytes[i] | 0x80;
      outdata.push_back(bytes[i]);
   }
   outdata.push_back(bytes[4]);
}

@@END:	FunctionDocumentation



